// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Models;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(DatContext))]
    [Migration("20240131185620_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.Database", b =>
                {
                    b.Property<int>("DatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("DatabaseID");

                    b.Property<int?>("Context")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)");

                    b.HasKey("DatabaseId");

                    b.HasIndex("ServerId");

                    b.HasIndex(new[] { "Name", "ServerId" }, "IX_Database_NameServerID")
                        .IsUnique();

                    b.ToTable("Database", (string)null);
                });

            modelBuilder.Entity("Project.Models.Domain", b =>
                {
                    b.Property<int>("DomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomainId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Edition")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsSsoEnabled")
                        .HasColumnType("bit");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentCompany")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DomainId");

                    b.ToTable("Domain", null, t =>
                        {
                            t.HasTrigger("tr_Domain_Delete");

                            t.HasTrigger("tr_Domain_Insert");

                            t.HasTrigger("tr_Domain_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Project.Models.DomainEnvironment", b =>
                {
                    b.Property<int>("DomainEnvironmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DomainEnvironmentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomainEnvironmentId"));

                    b.Property<int?>("BpdatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("BPDatabaseID");

                    b.Property<int>("BpwebServerId")
                        .HasColumnType("int")
                        .HasColumnName("BPWebServerID");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<int?>("EaidatabaseId")
                        .HasColumnType("int")
                        .HasColumnName("EAIDatabaseID");

                    b.Property<int?>("EaiftpserverId")
                        .HasColumnType("int")
                        .HasColumnName("EAIFTPServerID");

                    b.Property<int>("Environment")
                        .HasColumnType("int");

                    b.Property<bool>("IsBp5Enabled")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int?>("SsrsserverId")
                        .HasColumnType("int")
                        .HasColumnName("SSRSServerID");

                    b.Property<int?>("TableauServerId")
                        .HasColumnType("int")
                        .HasColumnName("TableauServerID");

                    b.HasKey("DomainEnvironmentId");

                    b.HasIndex("BpdatabaseId");

                    b.HasIndex("BpwebServerId");

                    b.HasIndex("EaidatabaseId");

                    b.HasIndex("EaiftpserverId");

                    b.HasIndex("SsrsserverId");

                    b.HasIndex("TableauServerId");

                    b.HasIndex(new[] { "DomainId", "Environment" }, "IX_DomainID_Environment")
                        .IsUnique();

                    b.ToTable("DomainEnvironment", (string)null);
                });

            modelBuilder.Entity("Project.Models.DomainLog", b =>
                {
                    b.Property<int>("DomainLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Domain_LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DomainLogId"));

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("Edition")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<bool>("IsSsoEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("LogAction")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Logo")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ParentCompany")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("DomainLogId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("DomainLogId"), false);

                    b.HasIndex(new[] { "DomainId" }, "IX_Domain_Log");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "DomainId" }, "IX_Domain_Log"));

                    b.ToTable("Domain_Log", (string)null);
                });

            modelBuilder.Entity("Project.Models.IpBlacklist", b =>
                {
                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("IP");

                    b.ToTable("IpBlacklist", (string)null);
                });

            modelBuilder.Entity("Project.Models.Login", b =>
                {
                    b.Property<int>("LoginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginId"));

                    b.Property<string>("BlockedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Datenabled")
                        .HasColumnType("bit")
                        .HasColumnName("DATEnabled");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("InvalidAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PasswordModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ResetPasswordEndDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ResetPasswordInvalidAttemptCount")
                        .HasColumnType("smallint");

                    b.Property<string>("ResetPasswordKey")
                        .HasMaxLength(72)
                        .IsUnicode(false)
                        .HasColumnType("varchar(72)");

                    b.Property<short>("ResetPasswordSentCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("LoginId");

                    b.ToTable("Login", null, t =>
                        {
                            t.HasTrigger("tr_Login_Delete");

                            t.HasTrigger("tr_Login_Insert");

                            t.HasTrigger("tr_Login_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Project.Models.LoginAuthorizationException", b =>
                {
                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.HasKey("LoginId");

                    b.ToTable("LoginAuthorizationException", (string)null);
                });

            modelBuilder.Entity("Project.Models.LoginDomainUser", b =>
                {
                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("UserId")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.Property<int>("Environment")
                        .HasColumnType("int");

                    b.Property<bool?>("AnalyticsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("DomainLastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("IsLight")
                        .HasColumnType("bit");

                    b.Property<bool>("LoginEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int?>("LoginTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("SysAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SysAdminEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SysAdminStartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("UserActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LoginId", "DomainId", "UserId", "Environment");

                    b.HasIndex("DomainId");

                    b.ToTable("LoginDomainUser", null, t =>
                        {
                            t.HasTrigger("tr_LoginDomainUser_Delete");

                            t.HasTrigger("tr_LoginDomainUser_Insert");

                            t.HasTrigger("tr_LoginDomainUser_Update");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Project.Models.LoginDomainUserLog", b =>
                {
                    b.Property<bool?>("AnalyticsEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("Comment")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<DateTime?>("DomainLastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Environment")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLight")
                        .HasColumnType("bit");

                    b.Property<string>("LogAction")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginDomainUserLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginDomainUser_LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginDomainUserLogId"));

                    b.Property<bool>("LoginEnabled")
                        .HasColumnType("bit");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<int?>("LoginTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("SysAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SysAdminEndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("SysAdminStartDate")
                        .HasColumnType("datetime");

                    b.Property<bool>("UserActive")
                        .HasColumnType("bit");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("UserID");

                    b.Property<string>("UserName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasIndex(new[] { "DomainId" }, "IX_LoginDomainUser_Log");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "DomainId" }, "IX_LoginDomainUser_Log"));

                    b.ToTable("LoginDomainUser_Log", (string)null);
                });

            modelBuilder.Entity("Project.Models.LoginImage", b =>
                {
                    b.Property<int>("LoginImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginImageID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginImageId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ExecutionContext")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.HasKey("LoginImageId");

                    b.ToTable("LoginImage", (string)null);
                });

            modelBuilder.Entity("Project.Models.LoginLog", b =>
                {
                    b.Property<int>("LoginLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Login_LogID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginLogId"));

                    b.Property<string>("BlockedReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Datenabled")
                        .HasColumnType("bit")
                        .HasColumnName("DATEnabled");

                    b.Property<string>("Email")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("InvalidAttemptCount")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("datetime");

                    b.Property<string>("LogAction")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .IsFixedLength();

                    b.Property<DateTime>("LogDate")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("PasswordExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("PasswordModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.Property<string>("Phone")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ResetPasswordEndDate")
                        .HasColumnType("datetime");

                    b.Property<short>("ResetPasswordInvalidAttemptCount")
                        .HasColumnType("smallint");

                    b.Property<string>("ResetPasswordKey")
                        .HasMaxLength(72)
                        .IsUnicode(false)
                        .HasColumnType("varchar(72)");

                    b.Property<short>("ResetPasswordSentCount")
                        .HasColumnType("smallint");

                    b.Property<bool>("TermsAccepted")
                        .HasColumnType("bit");

                    b.HasKey("LoginLogId");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("LoginLogId"), false);

                    b.HasIndex(new[] { "LoginId" }, "IX_Login_Log");

                    SqlServerIndexBuilderExtensions.IsClustered(b.HasIndex(new[] { "LoginId" }, "IX_Login_Log"));

                    b.ToTable("Login_Log", (string)null);
                });

            modelBuilder.Entity("Project.Models.LoginNews", b =>
                {
                    b.Property<int>("LoginNewsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("LoginNewsID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LoginNewsId"));

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LinkUrl")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("LoginNewsId");

                    b.ToTable("LoginNews");
                });

            modelBuilder.Entity("Project.Models.LoginPasswordRule", b =>
                {
                    b.Property<string>("DictionaryItemCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("InternalDescription")
                        .IsRequired()
                        .HasMaxLength(510)
                        .IsUnicode(false)
                        .HasColumnType("varchar(510)");

                    b.Property<Guid>("PasswordRuleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PasswordRuleID");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("LoginPasswordRule", (string)null);
                });

            modelBuilder.Entity("Project.Models.PasswordHistory", b =>
                {
                    b.Property<int>("PasswordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PasswordID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PasswordId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<byte[]>("Password")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PasswordSalt")
                        .HasMaxLength(32)
                        .IsUnicode(false)
                        .HasColumnType("char(32)")
                        .IsFixedLength();

                    b.HasKey("PasswordId")
                        .HasName("PK_PasswordHistory_1");

                    b.HasIndex("LoginId");

                    b.ToTable("PasswordHistory", (string)null);
                });

            modelBuilder.Entity("Project.Models.Redirect", b =>
                {
                    b.Property<Guid>("RedirectId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("RedirectID");

                    b.Property<string>("Action")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Environment")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("ProfileId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ProfileID");

                    b.HasKey("RedirectId");

                    b.ToTable("Redirect", (string)null);
                });

            modelBuilder.Entity("Project.Models.Server", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Bp5Address")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<string>("Bp5FrontAddress")
                        .HasMaxLength(1024)
                        .IsUnicode(false)
                        .HasColumnType("varchar(1024)");

                    b.Property<int?>("Context")
                        .HasColumnType("int");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ResourceGroup")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<Guid?>("SubscriptionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SubscriptionID");

                    b.Property<string>("Type")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("ServerId");

                    b.ToTable("Server", (string)null);
                });

            modelBuilder.Entity("Project.Models.ServerParameter", b =>
                {
                    b.Property<int>("ServerId")
                        .HasColumnType("int")
                        .HasColumnName("ServerID");

                    b.Property<string>("ParameterKey")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ParameterValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ServerId", "ParameterKey");

                    b.ToTable("ServerParameter", (string)null);
                });

            modelBuilder.Entity("Project.Models.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Data")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("SessionID");

                    b.Property<string>("UserAgent")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("UserHostAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserHostName")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("Id")
                        .HasName("PK_Session_1");

                    b.HasIndex(new[] { "LoginId", "Action", "Date" }, "IXN_Session_LoginID_Action_Date");

                    b.ToTable("Session", (string)null);
                });

            modelBuilder.Entity("Project.Models.SingleSignOnCredentialMapping", b =>
                {
                    b.Property<int>("CredentialMappingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CredentialMappingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CredentialMappingId"));

                    b.Property<int?>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int?>("Saml2IdentityProviderId")
                        .HasColumnType("int")
                        .HasColumnName("Saml2IdentityProviderID");

                    b.Property<string>("SourcePrincipalName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CredentialMappingId");

                    b.HasIndex("DomainId");

                    b.HasIndex("LoginId");

                    b.HasIndex("Saml2IdentityProviderId");

                    b.ToTable("SingleSignOnCredentialMapping", (string)null);
                });

            modelBuilder.Entity("Project.Models.SingleSignOnMethod", b =>
                {
                    b.Property<int>("SingleSignOnId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("SingleSignOnID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SingleSignOnId"));

                    b.Property<int?>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("MethodUrl")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Saml2IdentityProviderId")
                        .HasColumnType("int")
                        .HasColumnName("Saml2IdentityProviderID");

                    b.Property<string>("UrlHost")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("SingleSignOnId")
                        .HasName("PK__SingleSi__CB1BECB8D19D0446");

                    b.HasIndex("DomainId");

                    b.HasIndex("Saml2IdentityProviderId");

                    b.HasIndex(new[] { "UrlHost" }, "UQ_SingleSignOnMethod_UrlHost")
                        .IsUnique();

                    b.ToTable("SingleSignOnMethod", (string)null);
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2ContactPerson", b =>
                {
                    b.Property<int>("ContactPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ContactPersonID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactPersonId"));

                    b.Property<string>("Company")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("EmailAddresses")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("GivenName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ContactPersonId")
                        .HasName("PK__SingleSi__97C702DE854896F8");

                    b.ToTable("SingleSignOnSaml2ContactPerson", (string)null);
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2IdentityProviderInfo", b =>
                {
                    b.Property<int>("Saml2IdentityProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Saml2IdentityProviderID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Saml2IdentityProviderId"));

                    b.Property<string>("AudienceId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("AudienceID");

                    b.Property<string>("CertificateFileName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("FederationMetaDataDocumentUri")
                        .HasMaxLength(2000)
                        .IsUnicode(false)
                        .HasColumnType("varchar(2000)");

                    b.Property<string>("IdentityProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsCertificateRequired")
                        .HasColumnType("bit");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("RequestEntityId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("RequestEntityID");

                    b.Property<string>("ResponseEntityId")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("ResponseEntityID");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)");

                    b.HasKey("Saml2IdentityProviderId");

                    b.HasIndex("DomainId");

                    b.ToTable("SingleSignOnSaml2IdentityProviderInfo", (string)null);
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2IdentityProviderInfoDomain", b =>
                {
                    b.Property<int>("Saml2IdentityProviderDomainId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Saml2IdentityProviderDomainID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Saml2IdentityProviderDomainId"));

                    b.Property<int?>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime");

                    b.Property<int>("Saml2IdentityProviderId")
                        .HasColumnType("int")
                        .HasColumnName("Saml2IdentityProviderID");

                    b.HasKey("Saml2IdentityProviderDomainId");

                    b.HasIndex("DomainId");

                    b.HasIndex("Saml2IdentityProviderId");

                    b.ToTable("SingleSignOnSaml2IdentityProviderInfoDomain", (string)null);
                });

            modelBuilder.Entity("Project.Models.UserSetting", b =>
                {
                    b.Property<int>("UserSettingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserSettingID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserSettingId"));

                    b.Property<int>("DomainId")
                        .HasColumnType("int")
                        .HasColumnName("DomainID");

                    b.Property<int>("LoginId")
                        .HasColumnType("int")
                        .HasColumnName("LoginID");

                    b.Property<string>("ModifiedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateOnly>("ModifiedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("date")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.HasKey("UserSettingId")
                        .HasName("PK_UserSetting");

                    b.HasIndex("DomainId");

                    b.HasIndex("LoginId");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Project.Models.Database", b =>
                {
                    b.HasOne("Project.Models.Server", "Server")
                        .WithMany("Databases")
                        .HasForeignKey("ServerId")
                        .IsRequired()
                        .HasConstraintName("FK_Database_Server");

                    b.Navigation("Server");
                });

            modelBuilder.Entity("Project.Models.DomainEnvironment", b =>
                {
                    b.HasOne("Project.Models.Database", "Bpdatabase")
                        .WithMany("DomainEnvironmentBpdatabases")
                        .HasForeignKey("BpdatabaseId")
                        .HasConstraintName("FK_DomainEnvironment_Database");

                    b.HasOne("Project.Models.Server", "BpwebServer")
                        .WithMany("DomainEnvironmentBpwebServers")
                        .HasForeignKey("BpwebServerId")
                        .IsRequired()
                        .HasConstraintName("FK_DomainEnvironment_Server");

                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("DomainEnvironments")
                        .HasForeignKey("DomainId")
                        .IsRequired()
                        .HasConstraintName("FK_DomainEnvironment_Domain");

                    b.HasOne("Project.Models.Database", "Eaidatabase")
                        .WithMany("DomainEnvironmentEaidatabases")
                        .HasForeignKey("EaidatabaseId")
                        .HasConstraintName("FK_DomainEnvironment_Database1");

                    b.HasOne("Project.Models.Server", "Eaiftpserver")
                        .WithMany("DomainEnvironmentEaiftpservers")
                        .HasForeignKey("EaiftpserverId")
                        .HasConstraintName("FK_DomainEnvironment_Server5");

                    b.HasOne("Project.Models.Server", "Ssrsserver")
                        .WithMany("DomainEnvironmentSsrsservers")
                        .HasForeignKey("SsrsserverId")
                        .HasConstraintName("FK_DomainEnvironment_Server1");

                    b.HasOne("Project.Models.Server", "TableauServer")
                        .WithMany("DomainEnvironmentTableauServers")
                        .HasForeignKey("TableauServerId")
                        .HasConstraintName("FK_DomainEnvironment_Server4");

                    b.Navigation("Bpdatabase");

                    b.Navigation("BpwebServer");

                    b.Navigation("Domain");

                    b.Navigation("Eaidatabase");

                    b.Navigation("Eaiftpserver");

                    b.Navigation("Ssrsserver");

                    b.Navigation("TableauServer");
                });

            modelBuilder.Entity("Project.Models.LoginAuthorizationException", b =>
                {
                    b.HasOne("Project.Models.Login", "Login")
                        .WithOne("LoginAuthorizationException")
                        .HasForeignKey("Project.Models.LoginAuthorizationException", "LoginId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginAuthorizationException_Login");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Project.Models.LoginDomainUser", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("LoginDomainUsers")
                        .HasForeignKey("DomainId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginDomainUser_Domain");

                    b.HasOne("Project.Models.Login", "Login")
                        .WithMany("LoginDomainUsers")
                        .HasForeignKey("LoginId")
                        .IsRequired()
                        .HasConstraintName("FK_LoginDomainUser_Login");

                    b.Navigation("Domain");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Project.Models.PasswordHistory", b =>
                {
                    b.HasOne("Project.Models.Login", "Login")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PasswordHistory_Login");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Project.Models.Session", b =>
                {
                    b.HasOne("Project.Models.Login", "Login")
                        .WithMany("Sessions")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Session_Login");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Project.Models.SingleSignOnCredentialMapping", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("SingleSignOnCredentialMappings")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_SingleSignOnCredentialMapping_Domain");

                    b.HasOne("Project.Models.Login", "Login")
                        .WithMany("SingleSignOnCredentialMappings")
                        .HasForeignKey("LoginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SingleSignOnCredentialMapping_Login");

                    b.HasOne("Project.Models.SingleSignOnSaml2IdentityProviderInfo", "Saml2IdentityProvider")
                        .WithMany("SingleSignOnCredentialMappings")
                        .HasForeignKey("Saml2IdentityProviderId")
                        .HasConstraintName("FK_SingleSignOnCredentialMapping_SingleSignOnSaml2IdentityProviderInfo");

                    b.Navigation("Domain");

                    b.Navigation("Login");

                    b.Navigation("Saml2IdentityProvider");
                });

            modelBuilder.Entity("Project.Models.SingleSignOnMethod", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("SingleSignOnMethods")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_SingleSignOnMethod_Domain");

                    b.HasOne("Project.Models.SingleSignOnSaml2IdentityProviderInfo", "Saml2IdentityProvider")
                        .WithMany("SingleSignOnMethods")
                        .HasForeignKey("Saml2IdentityProviderId")
                        .IsRequired()
                        .HasConstraintName("Fk_SingleSignOnMethod_SingleSignOnSaml2IdentityProviderInfo");

                    b.Navigation("Domain");

                    b.Navigation("Saml2IdentityProvider");
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2IdentityProviderInfo", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("SingleSignOnSaml2IdentityProviderInfos")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_SingleSignOnSaml2IdentityProviderInfo_Domain");

                    b.Navigation("Domain");
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2IdentityProviderInfoDomain", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("SingleSignOnSaml2IdentityProviderInfoDomains")
                        .HasForeignKey("DomainId")
                        .HasConstraintName("FK_SingleSignOnSaml2IdentityProviderInfoDomain_Domain");

                    b.HasOne("Project.Models.SingleSignOnSaml2IdentityProviderInfo", "Saml2IdentityProvider")
                        .WithMany("SingleSignOnSaml2IdentityProviderInfoDomains")
                        .HasForeignKey("Saml2IdentityProviderId")
                        .IsRequired()
                        .HasConstraintName("FK_SingleSignOnSaml2IdentityProviderInfoDomain_SingleSignOnSaml2IdentityProviderInfo");

                    b.Navigation("Domain");

                    b.Navigation("Saml2IdentityProvider");
                });

            modelBuilder.Entity("Project.Models.UserSetting", b =>
                {
                    b.HasOne("Project.Models.Domain", "Domain")
                        .WithMany("UserSettings")
                        .HasForeignKey("DomainId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSetting_Domain");

                    b.HasOne("Project.Models.Login", "Login")
                        .WithMany("UserSettings")
                        .HasForeignKey("LoginId")
                        .IsRequired()
                        .HasConstraintName("FK_UserSetting_Login");

                    b.Navigation("Domain");

                    b.Navigation("Login");
                });

            modelBuilder.Entity("Project.Models.Database", b =>
                {
                    b.Navigation("DomainEnvironmentBpdatabases");

                    b.Navigation("DomainEnvironmentEaidatabases");
                });

            modelBuilder.Entity("Project.Models.Domain", b =>
                {
                    b.Navigation("DomainEnvironments");

                    b.Navigation("LoginDomainUsers");

                    b.Navigation("SingleSignOnCredentialMappings");

                    b.Navigation("SingleSignOnMethods");

                    b.Navigation("SingleSignOnSaml2IdentityProviderInfoDomains");

                    b.Navigation("SingleSignOnSaml2IdentityProviderInfos");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Project.Models.Login", b =>
                {
                    b.Navigation("LoginAuthorizationException");

                    b.Navigation("LoginDomainUsers");

                    b.Navigation("PasswordHistories");

                    b.Navigation("Sessions");

                    b.Navigation("SingleSignOnCredentialMappings");

                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Project.Models.Server", b =>
                {
                    b.Navigation("Databases");

                    b.Navigation("DomainEnvironmentBpwebServers");

                    b.Navigation("DomainEnvironmentEaiftpservers");

                    b.Navigation("DomainEnvironmentSsrsservers");

                    b.Navigation("DomainEnvironmentTableauServers");
                });

            modelBuilder.Entity("Project.Models.SingleSignOnSaml2IdentityProviderInfo", b =>
                {
                    b.Navigation("SingleSignOnCredentialMappings");

                    b.Navigation("SingleSignOnMethods");

                    b.Navigation("SingleSignOnSaml2IdentityProviderInfoDomains");
                });
#pragma warning restore 612, 618
        }
    }
}
